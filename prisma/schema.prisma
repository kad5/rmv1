// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//---------------------- auth tables ----------------------//

model User {
  id        String @id @default(uuid())
  profileId String @unique

  email     String? @unique
  googleId  String? @unique
  appleId   String? @unique
  twitterId String? @unique

  password String
  name     String

  refreshTokens     RefreshToken?
  activatedAccount  Boolean             @default(false)
  verificationToken verificationToken[]

  subscriptions Subscription[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id])
}

model Profile {
  id   String @id @default(uuid())
  user User?

  currentLevel String?
  nextExamDate DateTime?

  preferences Preference[]
  notes       Note[]
  favorites   Favorite[]

  courseProgress   CourseProgress[]
  caseProgress     CaseProgress[]
  examAttempts     ExamAttempt[]
  questionAttempts QuestionAttempt[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique //making userId unique enforces signel device login only 
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum verificationTokenType {
  ACCOUNT_CREATION
  PASSWORD_RESET
  ACCOUNT_DELETION
  SERVICE_CANCELLATION
}

model verificationToken {
  id     String                @id @default(uuid())
  token  String                @unique
  userId String
  type   verificationTokenType

  usedAt    DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

//---------------------- shared tables ----------------------//
enum FeedbackTargetType {
  COURSE_CONTENT //for lessons table
  EXAM // for exams table
}

model Feedback {
  id        String @id @default(uuid())
  profileId String

  targetType FeedbackTargetType
  targetId   String // stores the ID of either Lesson, Quiz, or Exam
  evaluation Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, targetId, targetType]) // Ensures one feedback per user per instance
}

model Note {
  id        String @id @default(uuid())
  profileId String

  providerId String // Stores either a course or (examID same as target for exam) // to product id
  targetId   String // The item the note is attached to (card, exam)
  content    String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, providerId])
}

enum FavoriteTargetType {
  CARD
  CASE
  QUESTION
}

model Favorite {
  id        String @id @default(uuid())
  profileId String

  type       FavoriteTargetType // needed since 1 course can have cards and cases
  providerId String // Stores either a course or bank ID
  targetId   String // The favorited item (card, case, MCQ, etc.)

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, type, targetId]) // ensures one favorite per item per user
  @@index([profileId, providerId]) // indexes all the stuff from a course or an exam bank page
  @@index([profileId, providerId, type]) // only needed for  cards/ cases of same course
}

enum PreferenceKey {
  //general preferences
  DARK_MODE // vales: LGIHT or DARK or SYSTEM
  SIDEBAR_POSITION // values: Boolean

  EMAIL_MARKETING // values: Boolean
  EMAIL_NOTIFICATION // values: Boolean

  // specific
  MODE_2B_COURSE //values: REVIEW or STUDY
}

model Preference {
  id        String @id @default(uuid())
  profileId String

  productId String? // Nullable in case the preference is global
  key       PreferenceKey // ENUM for easier querying
  value     Json // Store structured settings (booleans, numbers, etc.)

  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, key, productId]) // Ensure a user can have only one preference per key-product pair
  @@index([profileId]) // Fast lookup of all user preferences at login propably and store as part of user context
}

//---------------------- products tables ----------------------//

enum StepLevel {
  STEP_1
  STEP_2A
  STEP_2B
}

enum ContentType {
  COURSE
  EXAM_BANK
}

model Product {
  id          String           @id @default(uuid())
  title       String
  description String?
  step        StepLevel
  packages    PackageProduct[]

  contentType   ContentType
  courseContent CourseContnet[]
  exams         Exam[]
}

model Package {
  id            String           @id @default(uuid())
  title         String
  description   String?
  price         Int // The intial price the user pays
  renewalCost   Int // Monthly renewal cost as a guideline initially to display to the user, but billing follows the cost on Subscription model
  currency      String           @default("gbp")
  duration      Int // Initial access period (e.g., 3 months, 6 months) ie stripe paid trial
  products      PackageProduct[]
  subscriptions Subscription[]
}

model PackageProduct {
  packageId String
  productId String
  package   Package @relation(fields: [packageId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([packageId, productId])
}

enum SubscriptionStatus {
  ACTIVE_INITIAL
  ACTIVE_MONTHLY
  CANCELED
  EXPIRED
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  packageId String
  status    SubscriptionStatus @default(ACTIVE_INITIAL)

  stripeSubscriptionId String? // Link to Stripe subscription
  stripeCustomerId     String? // Link to Stripe customer

  startDate        DateTime  @default(now())
  initialPeriodEnd DateTime
  nextBillingDate  DateTime?
  subscriptionEnd  DateTime

  renewalCost Int // keep this here also because you can change package pricing without affecting existing subscriptions
  currency    String  @default("gbp") // Adding currency field with default
  autoRenew   Boolean @default(true) // tracks auto-billing preference PER SUBSCRIPTION

  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  @@index([userId, status])
}

//---------------------- content tables ----------------------//
enum CourseContnetType {
  LESSON
  QUIZ
}

model CourseContnet {
  id       String @id @default(uuid())
  courseId String // relates to a Product with contentType = COURSE

  type        CourseContnetType
  module      String
  week        Int // which week the lesson is part of
  order       Int // ordering in the week
  orderString String // for the visuals only for example lesson number 1 would have a string of "Lesson 1"

  metadata    Json? // currently nothing here, but for later if i want to add something
  title       String // the title
  description String? // if any

  cards               Card[] //its cards
  tips                Json? // tips at te end of the lesson if any
  additionalResources Json? // additional resources at te end of the lesson if any

  lesson CourseContnet? @relation("LessonQuiz")
  quiz   CourseContnet? @relation("LessonQuiz", fields: [quizId], references: [id])
  quizId String?        @unique

  course Product @relation(fields: [courseId], references: [id])

  @@index([courseId]) // Added index for faster course lesson queries
  @@index([type])
}

enum CardType {
  disease_Card
  approach
  emergency
  dd
  aunt_minnie
}

model Card {
  id       String @id @default(uuid())
  parentId String

  type   CardType
  order  Int
  module String // i added this here also so that if i want to query by module.

  metadata Json? // currently nothing here, but for later if i want to add something
  title    String
  content  Json // would contain subtitle, description, lists, and background info section.

  // For more detailed linking to cases if needed:
  cases  Case[]
  parent CourseContnet @relation(fields: [parentId], references: [id])

  @@index([parentId]) // Added index for faster lesson card queries
}

model Case {
  id     String @id @default(uuid())
  cardId String

  order  Int
  title  String
  module String // i added this here also so that if i want to query by module. 

  metadata  Json? // currently nothing here, but for later if i want to add something
  content   Json // would be an array of text strings probably or perhaps an object
  images    Json
  viva      Boolean? //specific for the 2b course
  rapids    Boolean? //specific for the 2b course
  longs     Boolean? //specific for the 2b course
  highYield Boolean? //specific for the 2b course

  card Card @relation(fields: [cardId], references: [id])

  @@index([cardId]) // Added index for faster card case queries
}

model Exam {
  id     String @id @default(uuid())
  bankId String // relates to product with contentType = EXAM

  order     Int // its number in the exam bank
  content   Json //desdescription  and exam specific tips and tricks
  questions Question[] // references the related questions

  bank Product @relation(fields: [bankId], references: [id])

  @@index([bankId]) // Added index for faster bank exam queries
}

model Question {
  id     String @id @default(uuid())
  examId String

  content Json // contains the question body, the possible answers if MCQ and the model answer
  images  Json? // similar to the case model, a link to an external protected S3 bucket image(s)

  exam Exam @relation(fields: [examId], references: [id])

  @@index([examId]) // Added index for faster exam question queries
}

//---------------------- progress tables ----------------------//
model CourseProgress {
  id        String @id @default(uuid())
  profileId String

  courseId        String // corresponds to the Product id (course)
  courseContnetId String // corresponds to Lesson/quiz id

  //completed   Boolean   @default(false)
  //completedAt DateTime?

  profile Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, courseId, courseContnetId])
  @@index([profileId, courseId])
}

model CaseProgress {
  id        String @id @default(uuid())
  profileId String

  courseId String // corresponds to the Product id (course)
  caseId   String // corresponds to case id that is being tracked

  //completed   Boolean   @default(false)
  //completedAt DateTime?

  profile Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, courseId, caseId])
  //@@index([courseId, completed])
  @@index([courseId])
}

model ExamAttempt {
  id        String @id @default(uuid())
  profileId String

  examBankId String // corresponds to a Product id (exam bank)
  examId     String // identifier for the exam within the bank

  score            Int
  attemptedAt      DateTime          @default(now())
  durationSeconds  Int
  questionAttempts QuestionAttempt[]

  profile Profile @relation(fields: [profileId], references: [id])

  @@index([profileId, examBankId])
  @@index([profileId, examBankId, examId])
}

model QuestionAttempt {
  id        String @id @default(uuid())
  profileId String

  examAttemptId String // should match ExamAttempt.examId
  questionId    String // identifier for the question in the exam

  correct         Boolean
  answer          String?
  attemptedAt     DateTime @default(now())
  durationSeconds Int

  profile     Profile     @relation(fields: [profileId], references: [id])
  ExamAttempt ExamAttempt @relation(fields: [examAttemptId], references: [id])

  @@index([profileId, examAttemptId, questionId])
}
